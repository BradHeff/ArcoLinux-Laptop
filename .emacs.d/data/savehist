;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(file-name-history buffer-name-history minibuffer-history ivy-history))
(setq file-name-history '("~/Scripts/fetch_test.py" "/home/pheonix/Scripts/" "~/Scripts/Python/test.py" "~/Scripts/Python/infoGUI.py" "~/Scripts/Python/emacs_tut.py" "~/.emacs.d/straight/build/org/org-loaddefs.el"))
(setq buffer-name-history '("test.py" "*straight-process*" "*helm find files*" "infoGUI.py"))
(setq minibuffer-history '("/home/pheonix/Scripts/" "/home/pheonix/Scripts/Python/"))
(setq ivy-history '("sub" "fetch_test.py" "*Messages*" "*straight-process*" "org-loaddefs.el"))
(setq evil-jumps-history '((9829 "/home/pheonix/Scripts/fetch_test.py") (8948 "/home/pheonix/Scripts/fetch_test.py") (2964 "/home/pheonix/Scripts/fetch_test.py") (9945 "/home/pheonix/Scripts/fetch_test.py") (2584 "/home/pheonix/Scripts/fetch_test.py") (2102 "/home/pheonix/Scripts/fetch_test.py") (11429 "/home/pheonix/Scripts/fetch_test.py") (4647 "/home/pheonix/Scripts/fetch_test.py") (88 "/home/pheonix/Scripts/fetch_test.py") (531 "/home/pheonix/Scripts/fetch_test.py") (449 "/home/pheonix/Scripts/Python/emacs_tut.py") (35 "/home/pheonix/Scripts/Python/emacs_tut.py")))
(setq kill-ring '("\\s\\s+/g" "re.sub" ", cpu)" "re.sub" "\\([^\\)]*\\)" "cpu" "cpu" "output.replace(\"(TM)\", \"\")" "get_system" "get_shell" "some_func()" "fn.get_termfn()" "fn." "self" "def get_system():
	sys = subprocess.check_output(('lsb_release', '-sir'))
	sys = sys.decode().strip().replace(\"\\n\", \" \")
	return sys

def get_brthd():
	bday = subprocess.Popen(('last'), stdout=subprocess.PIPE)
	grep = subprocess.Popen(('grep', \"begins\"), stdout=subprocess.PIPE, stdin=bday.stdout)
	
	sed = subprocess.check_output(('sed', 's/wtmp begins //g'), stdin=grep.stdout)
	return sed.decode().strip()

def get_res():
	resolution = subprocess.Popen([\"xrandr\",\"--nograb\",\"--current\"], stdout=subprocess.PIPE)
	res = subprocess.check_output((\"bash\", \"-c\", \"awk -F \\'connected |\\\\\\+|\\\\\\(' '/ connected/ && $2 {printf $2 \\\", \\\"}'\"), stdin=resolution.stdout)

	output = res.decode().strip()

	output = output.replace(\"primary \", \"\")
	output = output.rstrip(',')

	return output

	#return \"1920x1080\"

def get_wm():
	DISPLAY = subprocess.check_output((\"bash\", \"-c\", \"echo $DISPLAY\"))

	if (len(DISPLAY.decode().strip()) > 1):

		wm = subprocess.Popen([\"ps\", \"-e\"], stdout=subprocess.PIPE)
		grep = subprocess.check_output((\"grep\", \"-m\",\"1\",\"-o\",\"-F\",\"-e\",\"catwm\", \"-e\", \"dwm\", \"-e\", \"2bwm\", \"-e\", \"monsterwm\", \"-e\", \"tinywm\"), stdin=wm.stdout)
		wm = grep.decode().strip()
	return wm

def get_term():
	return get_process_name()

def get_termfn():
	term_font = subprocess.check_output((\"bash\", \"-c\", \"grep -i \\\"${term/d}\\\"'\\**\\*font:' <<< \\\"$(xrdb -query)\\\" | head -1 | awk '{print $2}'\"))
	term_font = term_font.decode().strip()

	term_font = trim(term_font)

	# xft: isn't required at the beginning so we prepend it if it's missing
	if(term_font[0:1] != \"-\" and term_font[0:4] != \"xft:\"):
		term_font = ''.join([\"xft:\", term_font])

	# Xresources has two different font formats, this checks which
	# one is in use and formats it accordingly.
	if(\"xft:\" in term_font):
            term_font = term_font.replace(\"xft:\", \"\")
            term_font = term_font.split(\":\")[0]

	return term_font


def get_theme():
	USER = subprocess.check_output((\"bash\", \"-c\", \"echo $USER\")).decode().strip()
	HOME = \"/home/\" + USER

	if(os.path.exists(HOME + \"/.gtkrc-2.0\")):
		gtk2_theme=subprocess.check_output((\"bash\", \"-c\", \"grep \\\"gtk-theme-name\\\" \\\"\" + HOME + \"/.gtkrc-2.0\\\"\")).decode().strip()

	elif(os.path.exists(\"/etc/gtk-2.0/gtkrc\")):
		gtk2_theme=subprocess.check_output((\"bash\", \"-c\", \"grep \\\"^[^#]*${name}\\\" /etc/gtk-2.0/gtkrc\")).decode().strip()

	elif(os.path.exists(\"/usr/share/gtk-2.0/gtkrc\")):
		gtk2_theme=subprocess.check_output((\"bash\", \"-c\", \"grep \\\"^[^#]*${name}\\\" /usr/share/gtk-2.0/gtkrc\")).decode().strip()

	gtk2_theme = gtk2_theme.replace(\"gtk-theme-name=\", \"\")

	# Check for general GTK3 Theme.

	if(os.path.exists(HOME + \"/.config/gtk-3.0/settings.ini\")):
		gtk3_theme=subprocess.check_output((\"bash\", \"-c\", \"grep \\\"gtk-theme-name\\\" \\\"\" + HOME + \"/.config/gtk-3.0/settings.ini\\\"\")).decode().strip()

	elif(os.path.exists(\"/usr/share/gtk-3.0/settings.ini\")):
		gtk3_theme=subprocess.check_output((\"bash\", \"-c\", \"grep \\\"^[^#]*$name\\\" /usr/share/gtk-3.0/settings.ini\")).decode().strip()

	elif(os.path.exists(\"/etc/gtk-3.0/settings.ini\")):
		gtk3_theme=subprocess.check_output((\"bash\", \"-c\", \"grep \\\"^[^#]*$name\\\" /etc/gtk-3.0/settings.ini\")).decode().strip()

	gtk3_theme = gtk3_theme.replace(\"gtk-theme-name=\",\"\")

	# Trim whitespace.
	gtk2_theme = trim(gtk2_theme)
	gtk3_theme = trim(gtk3_theme)

	# Remove quotes.
	gtk2_theme = trim_quotes(gtk2_theme)
	gtk3_theme = trim_quotes(gtk3_theme)

	# Format the string based on which themes exist.
	if(gtk2_theme == gtk3_theme):
		theme = gtk3_theme + \" [GTK2/3]\"
		gtk2_theme = \"\"
	else:
		theme = gtk2_theme + \", \" + gtk3_theme

	return theme

def get_cpu():
	cpu_file = \"/proc/cpuinfo\"
	cpu = subprocess.Popen([\"bash\", \"-c\", \"awk -F ': | @' '/model name|Processor|^cpu model|chip type|^cpu type/ { printf $2; exit }' \" + cpu_file], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
	output = cpu.communicate()
	output = output[0].decode().strip()

	cpu = output.replace(\"(TM)\", \"\")
	cpu = output.replace(\"(tm)\", \"\")
	cpu = output.replace(\"(R)\", \"\")
	cpu = output.replace(\"(r)\", \"\")
	cpu = output.replace(\"CPU\", \"\")
	cpu = output.replace(\"Processor\", \"\")
	cpu = output.replace(\"Dual-Core\", \"\")
	cpu = output.replace(\"Quad-Core\", \"\")
	cpu = output.replace(\"Six-Core\", \"\")
	cpu = output.replace(\"Eight-Core\", \"\")
	cpu = output.replace(\", * Compute Cores\", \"\")
	cpu = output.replace(\"Core \", \" \")
	cpu = output.replace(\"(\\\"AuthenticAMD\\\"*)\", \"\")
	cpu = output.replace(\"with Radeon * Graphics\", \"\")
	cpu = output.replace(\", altivec supported\", \"\")
	cpu = output.replace(\"FPU*\", \"\")
	cpu = output.replace(\"Chip Revision*\", \"\")
	cpu = output.replace(\"Technologies, Inc\", \"\")
	cpu = output.replace(\"Core2\", \"Core 2\")

	# Remove CPU brand from the output.
	cpu = output.replace(\"AMD\",\" \")
	cpu = output.replace(\"Intel\",\" \")
	cpu = output.replace(\"Core? Duo\",\" \")
	cpu = output.replace(\"Qualcomm\",\" \")
	return cpu

def get_gpu():
	mngr = subprocess.Popen([\"bash\",\"-c\",\"lspci -mm | awk -F \\'\\\\\\\"|\\\\\\\" \\\\\\\"|\\\\\\(\\' \\'/\\\"Display|\\\"3D|\\\"VGA/ {a[$0] = $3 \\\" \\\" $4} END {for(i in a){if(!seen[a[i]]++) print a[i]}}\\'\"], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
	output = mngr.communicate()
	output = output[0].decode().strip()

	output = re.sub(r'[^\\[]*\\[', \"\", output)
	output = re.sub(r'[^\\]]\\]', \"\", output)

	return output

def get_mem():
	mem_used = \"0\"
	with open('/proc/meminfo') as fp:
		for line in fp:
			if('MemTotal' in line):
				num = line.split(\":\")[1].strip().replace(\"kB\", \"\").strip()
				num = int(num)
				mem_total = num
				mem_used = int(mem_used) + num
			elif('Shmem' in line):
				num = line.split(\":\")[1].strip().replace(\"kB\", \"\").strip()
				num = int(num)
				mem_used = int(mem_used) + num
			elif(\"MemFree\" in line or \"Buffers\" in line or \"Cached\" in line or \"SReclaimable\" in line):
				num = line.split(\":\")[1].strip().replace(\"kB\", \"\").strip()
				num = int(num)
				mem_used = int(mem_used) - num

	mem_used = int(int(mem_used) / 1024)
	mem_total = int(int(mem_total) / 1024)

	return ''.join([str(mem_used), \"MiB / \", str(mem_total), \"MiB\"])    

def get_shell():
	shl = subprocess.Popen([\"bash\",\"-c\",\"echo \\\"${SHELL##*/}\\\"\"], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
	output = shl.communicate()
	output = output[0].decode().strip()
	if(re.search(\"bash\", output, re.IGNORECASE)):
		ver = subprocess.Popen([\"bash\",\"-c\",\"echo \\\"${BASH_VERSION/-*}\\\"\"], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
		out = ver.communicate()
		output = output + \" \" + out[0].decode().strip()

	shell = re.sub(\", version\", \"\", output)
	shell = re.sub(r'xonsh/', \"xonsh \", output)
	shell = re.sub(r'options*', \"\", output)
	shell = re.sub(r'\\([^)]*\\)',\"\",output)
	return shell

def get_packages():	
	def check_manager(manager):		
		mngr = subprocess.Popen([\"bash\",\"-c\",\"type -p \" + manager + \" >/dev/null && echo \\\"OK\\\" || echo \\\"\\\"\"], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
		output = mngr.communicate()		
		if( not output[0].decode().strip() == \"OK\"):
			return False
		return True

	if(check_manager(\"pacman-key\")): 
		pkgs = subprocess.Popen(('pacman', '-Qq', '--color', 'never'), stdout=subprocess.PIPE)
		count = subprocess.check_output(('wc', \"-l\"), stdin=pkgs.stdout).decode().strip()
		return str(count) + \" (pacman)\"
	elif(check_manager(\"dpkg\")): 
		pkgs = subprocess.Popen(('dpkg-query', '-f', '.\\n', '-W'), stdout=subprocess.PIPE)
		count = subprocess.check_output(('wc', \"-l\"), stdin=pkgs.stdout).decode().strip()
		return str(count) + \" (dpkg)\"
	elif(check_manager(\"rpm\")): 
		pkgs = subprocess.Popen(('rpm', '-qa'), stdout=subprocess.PIPE)
		count = subprocess.check_output(('wc', \"-l\"), stdin=pkgs.stdout).decode().strip()
		return str(count) + \" (dpkg)\"
	

    #has \"dpkg\"       && tot dpkg-query -f '.\\n' -W
    #has \"rpm\"        && tot rpm -qa
    #has \"xbps-query\" && tot xbps-query -l
    #has \"apk\"        && tot apk info
    #has \"opkg\"       && tot opkg list-installed
    #has \"pacman-g2\"  && tot pacman-g2 -Q
    #has \"lvu\"        && tot lvu installed
    #has \"tce-status\" && tot tce-status -i
    #has \"pkg_info\"   && tot pkg_info
    #has \"tazpkg\"     && tot tazpkg list && ((packages-=6))
    #has \"sorcery\"    && tot gaze installed
7    #has \"alps\"       && tot alps showinstalled
    #has \"butch\"      && tot butch list

    # Counting files/dirs.
    #has \"emerge\"     && dir /var/db/pkg/*/*/
    #has \"nix-env\"    && dir /nix/store/*/
    #has \"guix\"       && dir /gnu/store/*/
    #has \"Compile\"    && dir /Programs/*/
    #has \"eopkg\"      && dir /var/lib/eopkg/package/*
    #has \"crew\"       && dir /usr/local/etc/crew/meta/*.filelist
    #has \"pkgtool\"    && dir /var/log/packages/*
    #has \"cave\"       && dir /var/db/paludis/repositories/cross-installed/*/data/*/ \\
    #                        /var/db/paludis/repositories/installed/data/*/

def get_uptime():
	seconds = subprocess.check_output(('cat', '/proc/uptime'))
	seconds = seconds.decode().strip().split(\".\")[0].strip()
	days=''.join([str(int(int(seconds) / 60 / 60 / 24)), \"d \"])
	hours=''.join([str(int(int(seconds) / 60 / 60 % 24)), \"h \"])
	mins=''.join([str(int(int(seconds) / 60 % 60)), \"m \"])

	if(days == \"0d \"):
		days = \"\"
	if(hours == \"0h \"):
		hours = \"\"
	if(mins == \"0m \"):
		mins = \"\"
    
	return ''.join([days, hours, mins])

def get_kernel():
	kernel = subprocess.check_output(('uname', '-r'))
	return kernel.decode().strip()

def trim(string):
	return ' '.join(string.split())

def get_process_name():
	# Get PID name.
	name = subprocess.check_output((\"bash\", \"-c\", \"xprop -id $WINDOWID WM_CLASS | cut -d\\\" \\\" -f3\"))
	return re.sub(r'(\\\")', \"\", name.decode().replace(\",\",\"\")).strip()

def trim_quotes(string):
	trim_output = re.sub(r'(\\')', \"\", string)
	trim_output = re.sub(r'(\\\")', \"\", string)
	return trim_output" "res=get_res()
		wmname=get_wm()
		term=get_term()
		termfn=get_termfn()" "        col4 = self.get_colors(np.array((0, 2)))[0]
        col5 = self.get_colors(np.array((0, 2)))[1]
" "\" + col_Nn + fn.some_func())" "print(col0 + \"▉▉  | \" + col_Nb + \"" "print(col0 + \"▉▉  | \"" "\" + col_Dt + \"" "print(col0 + \"▉▉  | \" + col_Nb + \"" "print(col1 + \"  ▉▉| \" + col_Nb + \"" "${c07}▉▉  | ${f1}Uptime  ${f0}...... $f2$(get_uptime)
${c15}  ▉▉| ${f1}Resolution  ${f0}.. $f2$res
${c02}▉▉  |
${c10}  ▉▉| ${f1}WM ${f0}........... $f2$wmname
${c03}▉▉  | ${f1}Shell ${f0}........ $f2$(get_shell)
${c11}  ▉▉| ${f1}Terminal ${f0}..... $f2$term
${c04}▉▉  | ${f1}Term Font ${f0}.... $f2$termfn
${c12}  ▉▉| ${f1}System Font ${f0}.. $f2$systfn
${c05}▉▉  | 
${c13}  ▉▉| ${f1}Kernel ${f0}....... $f2$(get_kernel)
${c06}▉▉  | ${f1}Processor ${f0}.... $f2$(get_cpu)
${c14}  ▉▉| ${f1}Gpu ${f0}.......... $f2$(get_gpu)
${c07}▉▉  |
${c15}  ▉▉| ${f1}Birthday ${f0}..... $f2$birthd
${c08}▉▉  | ${f1}Memory ${f0}....... $f2$(get_mem)" "col0 = self.get_colors(np.array((0, 0)))[0]
        col1 = self.get_colors(np.array((0, 0)))[1]
" "print(col0 + \"" "\" + col_Nb + \"" "\"_+ col_Dt + \"" "_+ col_Dt + \"....... \" + col_Nn + fn.some_func())" "self.get_colors(np.array((0, 2)))[0]" "print(" "${c01}▉▉  | ${f1}System ${f0}....... $f2$system
${c09}  ▉▉| ${f1}Packages ${f0}..... $f2$(get_packages)" "\\33[" "col0 = self.get_colors(np.array(0, 1))[0]" "ENDC = '\\33[0m'
                BOLD = '\\33[1m'
                " "f2=$'\\e[0;37m'" "f0=$'\\e[1;30m'
" "
f0=$'\\e[1;30m'
f1=$'\\e[1;37m'
f2=$'\\e[0;37m'" "BOLD + '" "ENDC + '\\33[" "ENDC = '\\033[0m'
    BOLD = '\\033[1m'" "DBLACK = '\\e[0;30m'
        BLACK = '\\e[0;34m'" "
" "DCYAN = '\\e[0;36m'" "
        CYAN = '\\e[1;36m'" "DPINK = '\\e[0;35m'" "PINK = '\\e[1;35m'" "np.array(" "DBLUE = '\\e[1;30m'" "BLUE = '\\e[1;34m'
        " "DTAN = '\\e[0;33m'
        " "TAN = '\\e[1;33m'
        " "
        GREEN = '\\e[1;32m'" "DGREEN = '\\e[0;32m'" "DWHITE = '\\e[0;37m'" "WHITE = '\\e[1;37m'
        " "RED = '\\e[1;31m'
        DRED = '\\e[0;31m'
" "DBLACK = '\\e[0;30m'
RED = '\\e[1;31m'
DRED = '\\e[0;31m'

DGREEN = '\\e[0;32m'
DTAN = '\\e[0;33m'
DBLUE = '\\e[1;30m'
DPINK = '\\e[0;35m'
DCYAN = '\\e[0;36m'
DWHITE = '\\e[0;37m'
BLACK = '\\e[0;34m'
GREEN = '\\e[1;32m'
TAN = '\\e[1;33m'
BLUE = '\\e[1;34m'
PINK = '\\e[1;35m'
CYAN = '\\e[1;36m'
WHITE = '\\e[1;37m'" "${c01}▉▉  | ${f1}System ${f0}....... $f2$system
${c09}  ▉▉| ${f1}Packages ${f0}..... $f2$(get_packages)
${c07}▉▉  | ${f1}Uptime  ${f0}...... $f2$(get_uptime)
${c15}  ▉▉| ${f1}Resolution  ${f0}.. $f2$res
${c02}▉▉  |
${c10}  ▉▉| ${f1}WM ${f0}........... $f2$wmname
${c03}▉▉  | ${f1}Shell ${f0}........ $f2$(get_shell)
${c11}  ▉▉| ${f1}Terminal ${f0}..... $f2$term
${c04}▉▉  | ${f1}Term Font ${f0}.... $f2$termfn
${c12}  ▉▉| ${f1}System Font ${f0}.. $f2$systfn
${c05}▉▉  | 
${c13}  ▉▉| ${f1}Kernel ${f0}....... $f2$(get_kernel)
${c06}▉▉  | ${f1}Processor ${f0}.... $f2$(get_cpu)
${c14}  ▉▉| ${f1}Gpu ${f0}.......... $f2$(get_gpu)
${c07}▉▉  |
${c15}  ▉▉| ${f1}Birthday ${f0}..... $f2$birthd
${c08}▉▉  | ${f1}Memory ${f0}....... $f2$(get_mem)
" "DRED = '\\e[1;31m'
"))
(setq file-name-history '("~/Scripts/fetch_test.py" "/home/pheonix/Scripts/" "~/Scripts/Python/test.py" "~/Scripts/Python/infoGUI.py" "~/Scripts/Python/emacs_tut.py" "~/.emacs.d/straight/build/org/org-loaddefs.el"))
(setq file-name-mode-alist 'nil)
(setq search-ring 'nil)
(setq regexp-search-ring '("g[u" "get_b" "get_sge"))
